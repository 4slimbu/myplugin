name: Unit Tests

# Since Unit Tests are required to pass for each PR,
# we cannot disable them for documentation-only changes.
on:
    pull_request:
    push:
        branches:
            - main
    # Allow manually triggering the workflow.
    workflow_dispatch:

jobs:
    test-php:
        name: PHP ${{ matrix.php }}${{ matrix.multisite && ' multisite' || '' }}${{ matrix.wordpress != '' && format( ' (WP {0}) ', matrix.wordpress ) || '' }} on ubuntu-latest
        runs-on: ubuntu-latest
        timeout-minutes: 20
        strategy:
            fail-fast: true
            matrix:
                php:
                    - '8.2'
                multisite: [false]
                wordpress: [''] # Latest WordPress version.

        env:
            WP_ENV_PHP_VERSION: ${{ matrix.php }}
            WP_ENV_CORE: ${{ matrix.wordpress == '' && 'WordPress/WordPress' || format( 'https://wordpress.org/wordpress-{0}.zip', matrix.wordpress ) }}

        steps:
            - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3

            - name: Setup Node.js and install dependencies
              uses: ./.github/setup-node

            ##
            # This allows Composer dependencies to be installed using a single step.
            #
            # Since the tests are currently run within the Docker containers where the PHP version varies,
            # the same PHP version needs to be configured for the action runner machine so that the correct
            # dependency versions are installed and cached.
            ##
            - name: Set up PHP
              uses: shivammathur/setup-php@4bd44f22a98a19e0950cbad5f31095157cc9621b # v2.25.4
              with:
                  php-version: '${{ matrix.php }}'
                  ini-file: development
                  coverage: none

            # Ensure that Composer installs the correct versions of packages.
            - name: Override PHP version in composer.json
              run: composer config platform.php ${{ matrix.php }}

            # The spatie/phpunit-watcher package is not compatible with PHP < 7.2.
            # It must be removed before running the tests.
            - name: Remove incompatible Composer packages
              if: ${{ matrix.php < '7.2' }}
              run: composer remove spatie/phpunit-watcher --dev --no-update

            # Since Composer dependencies are installed using `composer update` and no lock file is in version control,
            # passing a custom cache suffix ensures that the cache is flushed at least once per week.
            - name: Install Composer dependencies
              uses: ramsey/composer-install@83af392bf5f031813d25e6fe4cd626cdba9a2df6 # v2.2.0
              with:
                  custom-cache-suffix: $(/bin/date -u --date='last Mon' "+%F")

            - name: Docker debug information
              run: |
                  docker -v
                  docker-compose -v

            - name: General debug information
              run: |
                  npm --version
                  node --version
                  curl --version
                  git --version
                  svn --version
                  locale -a

            - name: Start Docker environment
              run: npm run wp-env start

            - name: Log running Docker containers
              run: docker ps -a

            - name: Docker container debug information
              run: |
                  npm run wp-env run tests-mysql mysql -- --version
                  npm run wp-env run tests-wordpress php -- --version
                  npm run wp-env run tests-wordpress php -m
                  npm run wp-env run tests-wordpress php -i
                  npm run wp-env run tests-wordpress /var/www/html/wp-content/plugins/gutenberg/vendor/bin/phpunit -- --version
                  npm run wp-env run tests-wordpress locale -a

            - name: Running single site unit tests
              if: ${{ ! matrix.multisite }}
              run: |
                  set -o pipefail
                  npm run test:unit:php | tee phpunit.log

            - name: Check number of passed tests
              run: |
                  # Note: relies on PHPUnit execution to fail on test failure.
                  # Extract the number of executed tests from the log file.
                  if ! num_tests=$(grep -Eo 'OK \([0-9]+ tests' phpunit.log) ; then
                    if ! num_tests=$(grep -Eo 'Tests: [0-9]+, Assertions:' phpunit.log) ; then
                      echo "PHPUnit failed or did not run. Check the PHPUnit output in the previous step to debug." && exit 1
                    fi
                  fi
                  # Extract just the number of tests from the string.
                  num_tests=$(echo "$num_tests" | grep -Eo '[0-9]+')
                  if [ $num_tests -lt 500 ] ; then
                    echo "Only $num_tests tests passed, which is much fewer than expected." && exit 1
                  fi
                  echo "$num_tests tests passed."


